<?php
/**
 * PageFeedItemServiceReviewSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  YahooAdsSearchApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yahoo!広告 検索広告 API リファレンス β版 / Yahoo! Ads Search Ads API Reference β Version
 *
 * <ja>Yahoo!広告 検索広告 APIのWebサービスについて説明します。<br> 「Try it out」のご利用には、事前にアプリケーションの登録が必要です。また、アプリケーションのリダイレクトURIの1つに<br> https://yahoojp-marketing.github.io/ads-search-api-documents/oauth2-redirect.htmlを登録してください。 </ja><br> <br> <en>Search Ads API Web Services supported in Yahoo! Ads API.<br> When you use \"Try it out\", you need to register your application in advance.<br> As one of redirect URI for application, you need to set \"https://yahoojp-marketing.github.io/ads-search-api-documents/oauth2-redirect.html\". </en>
 *
 * The version of the OpenAPI document: v0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace YahooAdsSearchApi\Client\Model;

use \ArrayAccess;
use \YahooAdsSearchApi\Client\ObjectSerializer;

/**
 * PageFeedItemServiceReviewSummary Class Doc Comment
 *
 * @category Class
 * @description &lt;ja&gt;PageFeedItemServiceReviewSummaryオブジェクトは、ページフィードアイテムの審査成績、状況サマリーを格納します。&lt;/ja&gt;&lt;br&gt;&lt;en&gt;PageFeedItemServiceReviewSummary object retains the examination results of the page feed item, the situation summary acquisition result.&lt;/en&gt;
 * @package  YahooAdsSearchApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PageFeedItemServiceReviewSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PageFeedItemServiceReviewSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_id' => 'int',
        'approved_count' => 'int',
        'approved_with_review_count' => 'int',
        'entity_count' => 'int',
        'feed_id' => 'int',
        'post_disapproved_count' => 'int',
        'pre_disapproved_count' => 'int',
        'review_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'account_id' => 'int64',
        'approved_count' => 'int64',
        'approved_with_review_count' => 'int64',
        'entity_count' => 'int64',
        'feed_id' => 'int64',
        'post_disapproved_count' => 'int64',
        'pre_disapproved_count' => 'int64',
        'review_count' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'accountId',
        'approved_count' => 'approvedCount',
        'approved_with_review_count' => 'approvedWithReviewCount',
        'entity_count' => 'entityCount',
        'feed_id' => 'feedId',
        'post_disapproved_count' => 'postDisapprovedCount',
        'pre_disapproved_count' => 'preDisapprovedCount',
        'review_count' => 'reviewCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'approved_count' => 'setApprovedCount',
        'approved_with_review_count' => 'setApprovedWithReviewCount',
        'entity_count' => 'setEntityCount',
        'feed_id' => 'setFeedId',
        'post_disapproved_count' => 'setPostDisapprovedCount',
        'pre_disapproved_count' => 'setPreDisapprovedCount',
        'review_count' => 'setReviewCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'approved_count' => 'getApprovedCount',
        'approved_with_review_count' => 'getApprovedWithReviewCount',
        'entity_count' => 'getEntityCount',
        'feed_id' => 'getFeedId',
        'post_disapproved_count' => 'getPostDisapprovedCount',
        'pre_disapproved_count' => 'getPreDisapprovedCount',
        'review_count' => 'getReviewCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['approved_count'] = isset($data['approved_count']) ? $data['approved_count'] : null;
        $this->container['approved_with_review_count'] = isset($data['approved_with_review_count']) ? $data['approved_with_review_count'] : null;
        $this->container['entity_count'] = isset($data['entity_count']) ? $data['entity_count'] : null;
        $this->container['feed_id'] = isset($data['feed_id']) ? $data['feed_id'] : null;
        $this->container['post_disapproved_count'] = isset($data['post_disapproved_count']) ? $data['post_disapproved_count'] : null;
        $this->container['pre_disapproved_count'] = isset($data['pre_disapproved_count']) ? $data['pre_disapproved_count'] : null;
        $this->container['review_count'] = isset($data['review_count']) ? $data['review_count'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return int|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int|null $account_id <ja>アカウントID</ja><br><en>Account ID</en>
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets approved_count
     *
     * @return int|null
     */
    public function getApprovedCount()
    {
        return $this->container['approved_count'];
    }

    /**
     * Sets approved_count
     *
     * @param int|null $approved_count <ja>承認済みの件数</ja><br><en>Count of approved</en>
     *
     * @return $this
     */
    public function setApprovedCount($approved_count)
    {
        $this->container['approved_count'] = $approved_count;

        return $this;
    }

    /**
     * Gets approved_with_review_count
     *
     * @return int|null
     */
    public function getApprovedWithReviewCount()
    {
        return $this->container['approved_with_review_count'];
    }

    /**
     * Sets approved_with_review_count
     *
     * @param int|null $approved_with_review_count <ja>編集内容審査中の件数</ja><br><en>Count of approved with review</en>
     *
     * @return $this
     */
    public function setApprovedWithReviewCount($approved_with_review_count)
    {
        $this->container['approved_with_review_count'] = $approved_with_review_count;

        return $this;
    }

    /**
     * Gets entity_count
     *
     * @return int|null
     */
    public function getEntityCount()
    {
        return $this->container['entity_count'];
    }

    /**
     * Sets entity_count
     *
     * @param int|null $entity_count <ja>フィードフォルダ内にあるページフィードアイテムの総件数</ja><br><en>Total count of page feed item in feed folder</en>
     *
     * @return $this
     */
    public function setEntityCount($entity_count)
    {
        $this->container['entity_count'] = $entity_count;

        return $this;
    }

    /**
     * Gets feed_id
     *
     * @return int|null
     */
    public function getFeedId()
    {
        return $this->container['feed_id'];
    }

    /**
     * Sets feed_id
     *
     * @param int|null $feed_id <ja>フィードID</ja><br><en>Feed ID</en>
     *
     * @return $this
     */
    public function setFeedId($feed_id)
    {
        $this->container['feed_id'] = $feed_id;

        return $this;
    }

    /**
     * Gets post_disapproved_count
     *
     * @return int|null
     */
    public function getPostDisapprovedCount()
    {
        return $this->container['post_disapproved_count'];
    }

    /**
     * Sets post_disapproved_count
     *
     * @param int|null $post_disapproved_count <ja>配信停止の件数</ja><br><en>Count of distribution cancelled</en>
     *
     * @return $this
     */
    public function setPostDisapprovedCount($post_disapproved_count)
    {
        $this->container['post_disapproved_count'] = $post_disapproved_count;

        return $this;
    }

    /**
     * Gets pre_disapproved_count
     *
     * @return int|null
     */
    public function getPreDisapprovedCount()
    {
        return $this->container['pre_disapproved_count'];
    }

    /**
     * Sets pre_disapproved_count
     *
     * @param int|null $pre_disapproved_count <ja>掲載不可の件数</ja><br><en>Count of disapproved</en>
     *
     * @return $this
     */
    public function setPreDisapprovedCount($pre_disapproved_count)
    {
        $this->container['pre_disapproved_count'] = $pre_disapproved_count;

        return $this;
    }

    /**
     * Gets review_count
     *
     * @return int|null
     */
    public function getReviewCount()
    {
        return $this->container['review_count'];
    }

    /**
     * Sets review_count
     *
     * @param int|null $review_count <ja>審査中の件数</ja><br><en>Count of review</en>
     *
     * @return $this
     */
    public function setReviewCount($review_count)
    {
        $this->container['review_count'] = $review_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


