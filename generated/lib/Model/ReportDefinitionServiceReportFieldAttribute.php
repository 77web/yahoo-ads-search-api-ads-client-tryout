<?php
/**
 * ReportDefinitionServiceReportFieldAttribute
 *
 * PHP version 5
 *
 * @category Class
 * @package  YahooAdsSearchApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yahoo!広告 検索広告 API リファレンス β版 / Yahoo! Ads Search Ads API Reference β Version
 *
 * <ja>Yahoo!広告 検索広告 APIのWebサービスについて説明します。<br> 「Try it out」のご利用には、事前にアプリケーションの登録が必要です。また、アプリケーションのリダイレクトURIの1つに<br> https://yahoojp-marketing.github.io/ads-search-api-documents/oauth2-redirect.htmlを登録してください。 </ja><br> <br> <en>Search Ads API Web Services supported in Yahoo! Ads API.<br> When you use \"Try it out\", you need to register your application in advance.<br> As one of redirect URI for application, you need to set \"https://yahoojp-marketing.github.io/ads-search-api-documents/oauth2-redirect.html\". </en>
 *
 * The version of the OpenAPI document: v0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace YahooAdsSearchApi\Client\Model;

use \ArrayAccess;
use \YahooAdsSearchApi\Client\ObjectSerializer;

/**
 * ReportDefinitionServiceReportFieldAttribute Class Doc Comment
 *
 * @category Class
 * @description &lt;ja&gt;ReportDefinitionServiceReportFieldAttributeオブジェクトは、レポート定義の作成に使用できるフィールドを表します。&lt;/ja&gt;&lt;br&gt;&lt;en&gt;ReportDefinitionServiceReportFieldAttribute object describes the available field to create report definition.&lt;/en&gt;&lt;hr&gt;&lt;details&gt;&lt;summary&gt;Requirement&lt;/summary&gt;&lt;table border&#x3D;&#39;1&#39;&gt;&lt;tr&gt;&lt;th&gt;PROPERTY&lt;/th&gt;&lt;th&gt;GET&lt;/th&gt;&lt;th&gt;ADD&lt;/th&gt;&lt;th&gt;REMOVE&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;canFilter&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;canSelect&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;displayFieldNameEN&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;displayFieldNameJA&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fieldName&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fieldType&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;impossibleCombinationFields&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;xmlAttributeName&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/details&gt;
 * @package  YahooAdsSearchApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ReportDefinitionServiceReportFieldAttribute implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ReportDefinitionServiceReportFieldAttribute';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'can_filter' => 'bool',
        'can_select' => 'bool',
        'display_field_name_en' => 'string',
        'display_field_name_ja' => 'string',
        'field_name' => 'string',
        'field_type' => 'string',
        'impossible_combination_fields' => 'string[]',
        'xml_attribute_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'can_filter' => null,
        'can_select' => null,
        'display_field_name_en' => null,
        'display_field_name_ja' => null,
        'field_name' => null,
        'field_type' => null,
        'impossible_combination_fields' => null,
        'xml_attribute_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'can_filter' => 'canFilter',
        'can_select' => 'canSelect',
        'display_field_name_en' => 'displayFieldNameEN',
        'display_field_name_ja' => 'displayFieldNameJA',
        'field_name' => 'fieldName',
        'field_type' => 'fieldType',
        'impossible_combination_fields' => 'impossibleCombinationFields',
        'xml_attribute_name' => 'xmlAttributeName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'can_filter' => 'setCanFilter',
        'can_select' => 'setCanSelect',
        'display_field_name_en' => 'setDisplayFieldNameEn',
        'display_field_name_ja' => 'setDisplayFieldNameJa',
        'field_name' => 'setFieldName',
        'field_type' => 'setFieldType',
        'impossible_combination_fields' => 'setImpossibleCombinationFields',
        'xml_attribute_name' => 'setXmlAttributeName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'can_filter' => 'getCanFilter',
        'can_select' => 'getCanSelect',
        'display_field_name_en' => 'getDisplayFieldNameEn',
        'display_field_name_ja' => 'getDisplayFieldNameJa',
        'field_name' => 'getFieldName',
        'field_type' => 'getFieldType',
        'impossible_combination_fields' => 'getImpossibleCombinationFields',
        'xml_attribute_name' => 'getXmlAttributeName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['can_filter'] = isset($data['can_filter']) ? $data['can_filter'] : null;
        $this->container['can_select'] = isset($data['can_select']) ? $data['can_select'] : null;
        $this->container['display_field_name_en'] = isset($data['display_field_name_en']) ? $data['display_field_name_en'] : null;
        $this->container['display_field_name_ja'] = isset($data['display_field_name_ja']) ? $data['display_field_name_ja'] : null;
        $this->container['field_name'] = isset($data['field_name']) ? $data['field_name'] : null;
        $this->container['field_type'] = isset($data['field_type']) ? $data['field_type'] : null;
        $this->container['impossible_combination_fields'] = isset($data['impossible_combination_fields']) ? $data['impossible_combination_fields'] : null;
        $this->container['xml_attribute_name'] = isset($data['xml_attribute_name']) ? $data['xml_attribute_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets can_filter
     *
     * @return bool|null
     */
    public function getCanFilter()
    {
        return $this->container['can_filter'];
    }

    /**
     * Sets can_filter
     *
     * @param bool|null $can_filter <ja>ユーザーがこのフィールドにフィルタを 適用できるかどうかを示します。</ja><br><en>Indicate if use can filter the fields.</en>
     *
     * @return $this
     */
    public function setCanFilter($can_filter)
    {
        $this->container['can_filter'] = $can_filter;

        return $this;
    }

    /**
     * Gets can_select
     *
     * @return bool|null
     */
    public function getCanSelect()
    {
        return $this->container['can_select'];
    }

    /**
     * Sets can_select
     *
     * @param bool|null $can_select <ja>ユーザーがこのフィールドを 選択できるかどうかを示します。</ja><br><en>Indicate if user can select the fields.</en>
     *
     * @return $this
     */
    public function setCanSelect($can_select)
    {
        $this->container['can_select'] = $can_select;

        return $this;
    }

    /**
     * Gets display_field_name_en
     *
     * @return string|null
     */
    public function getDisplayFieldNameEn()
    {
        return $this->container['display_field_name_en'];
    }

    /**
     * Sets display_field_name_en
     *
     * @param string|null $display_field_name_en <ja>ダウンロードされたレポートに 表示される英語名です。</ja><br><en>Field name displayed in downloaded report (in English).</en>
     *
     * @return $this
     */
    public function setDisplayFieldNameEn($display_field_name_en)
    {
        $this->container['display_field_name_en'] = $display_field_name_en;

        return $this;
    }

    /**
     * Gets display_field_name_ja
     *
     * @return string|null
     */
    public function getDisplayFieldNameJa()
    {
        return $this->container['display_field_name_ja'];
    }

    /**
     * Sets display_field_name_ja
     *
     * @param string|null $display_field_name_ja <ja>ダウンロードされたレポートに 表示される日本語名です。</ja><br><en>Field name displayed in downloaded report (in Japanese).</en>
     *
     * @return $this
     */
    public function setDisplayFieldNameJa($display_field_name_ja)
    {
        $this->container['display_field_name_ja'] = $display_field_name_ja;

        return $this;
    }

    /**
     * Gets field_name
     *
     * @return string|null
     */
    public function getFieldName()
    {
        return $this->container['field_name'];
    }

    /**
     * Sets field_name
     *
     * @param string|null $field_name <ja>フィールド名です。</ja><br><en>Field name.</en>
     *
     * @return $this
     */
    public function setFieldName($field_name)
    {
        $this->container['field_name'] = $field_name;

        return $this;
    }

    /**
     * Gets field_type
     *
     * @return string|null
     */
    public function getFieldType()
    {
        return $this->container['field_type'];
    }

    /**
     * Sets field_type
     *
     * @param string|null $field_type <ja>フィールドの種類です。<br>数字、文字列、Enum値等を表します。</ja><br><en>Type of field.<br>Displays int, string, Enum, etc.</en>
     *
     * @return $this
     */
    public function setFieldType($field_type)
    {
        $this->container['field_type'] = $field_type;

        return $this;
    }

    /**
     * Gets impossible_combination_fields
     *
     * @return string[]|null
     */
    public function getImpossibleCombinationFields()
    {
        return $this->container['impossible_combination_fields'];
    }

    /**
     * Sets impossible_combination_fields
     *
     * @param string[]|null $impossible_combination_fields <ja>組み合わせができないレポートフィールドです。</ja><br><en>Report fields which cannot be combined.</en>
     *
     * @return $this
     */
    public function setImpossibleCombinationFields($impossible_combination_fields)
    {
        $this->container['impossible_combination_fields'] = $impossible_combination_fields;

        return $this;
    }

    /**
     * Gets xml_attribute_name
     *
     * @return string|null
     */
    public function getXmlAttributeName()
    {
        return $this->container['xml_attribute_name'];
    }

    /**
     * Sets xml_attribute_name
     *
     * @param string|null $xml_attribute_name <ja>ダウンロードしたレポートの XMLアトリビュートです。</ja><br><en>XML attribute name displayed in donwloaded report.</en>
     *
     * @return $this
     */
    public function setXmlAttributeName($xml_attribute_name)
    {
        $this->container['xml_attribute_name'] = $xml_attribute_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


