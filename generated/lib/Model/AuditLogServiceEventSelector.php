<?php
/**
 * AuditLogServiceEventSelector
 *
 * PHP version 5
 *
 * @category Class
 * @package  YahooAdsSearchApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yahoo!広告 検索広告 API リファレンス β版 / Yahoo! Ads Search Ads API Reference β Version
 *
 * <ja>Yahoo!広告 検索広告 APIのWebサービスについて説明します。<br> 「Try it out」のご利用には、事前にアプリケーションの登録が必要です。また、アプリケーションのリダイレクトURIの1つに<br> https://yahoojp-marketing.github.io/ads-search-api-documents/oauth2-redirect.htmlを登録してください。 </ja><br> <br> <en>Search Ads API Web Services supported in Yahoo! Ads API.<br> When you use \"Try it out\", you need to register your application in advance.<br> As one of redirect URI for application, you need to set \"https://yahoojp-marketing.github.io/ads-search-api-documents/oauth2-redirect.html\". </en>
 *
 * The version of the OpenAPI document: v0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace YahooAdsSearchApi\Client\Model;

use \ArrayAccess;
use \YahooAdsSearchApi\Client\ObjectSerializer;

/**
 * AuditLogServiceEventSelector Class Doc Comment
 *
 * @category Class
 * @description &lt;ja&gt;AuditLogServiceEventSelectorオブジェクトは、操作履歴の取得対象を設定します。&lt;/ja&gt;&lt;br&gt;&lt;en&gt;AuditLogServiceEventSelector object enables the target setting of acquiring operation history.&lt;/en&gt;
 * @package  YahooAdsSearchApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AuditLogServiceEventSelector implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuditLogServiceEventSelector';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'entity_type' => 'string',
        'event_types' => '\YahooAdsSearchApi\Client\Model\AuditLogServiceEventTypes[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'entity_type' => null,
        'event_types' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'entity_type' => 'entityType',
        'event_types' => 'eventTypes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'entity_type' => 'setEntityType',
        'event_types' => 'setEventTypes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'entity_type' => 'getEntityType',
        'event_types' => 'getEventTypes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['entity_type'] = isset($data['entity_type']) ? $data['entity_type'] : null;
        $this->container['event_types'] = isset($data['event_types']) ? $data['event_types'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets entity_type
     *
     * @return string|null
     */
    public function getEntityType()
    {
        return $this->container['entity_type'];
    }

    /**
     * Sets entity_type
     *
     * @param string|null $entity_type <ja>AuditLogServiceEntityTypeオブジェクトは、操作履歴に出力するエンティティの種類を表します。</ja><br><en>AuditLogServiceEntityType object describes the type of entities to be output on the data of operation history.</en><hr> * `CAMPAIGN` - <ja>キャンペーンです。</ja><br><en>Campaign.</en><br> * `NEGATIVE_CAMPAIGN_CRITERION` - <ja>対象外キーワードです（キャンペーン）。</ja><br><en>Negative keywords (for campaign)</en><br> * `CAMPAIGN_CRITERION` - <ja>キャンペーンのターゲティング設定です。</ja><br><en>Targeting setting on campaign.</en><br> * `AD_GROUP` - <ja>広告グループです。</ja><br><en>Ad group.</en><br> * `AD_GROUP_BID_MULTIPLIER` - <ja>広告グループ入札価格調整率です。</ja><br><en>Bid adjustment for ad group.</en><br> * `BIDDABLE_AD_GROUP_CRITERION` - <ja>入札キーワードです。</ja><br><en>Bidding keyword.</en><br> * `NEGATIVE_AD_GROUP_CRITERION` - <ja>対象外キーワードです（広告グループ）。</ja><br><en>Negative keywords (for ad group)</en><br> * `AD` - <ja>広告です。</ja><br><en>Ad.</en><br> * `FEED` - <ja>Feedフォルダーです。</ja><br><en>Feed folder.</en><br> * `FEED_ITEM` - <ja>広告表示オプションです。</ja><br><en>Ad display options.</en><br> * `CAMPAIGN_FEED` - <ja>広告表示オプションです（キャンペーン）。</ja><br><en>Ad display options for campaign.</en><br> * `AD_GROUP_FEED` - <ja>広告表示オプションです（広告グループ）。</ja><br><en>Ad display options for ad group.</en><br> * `SS_IO` - <ja>アカウントです。</ja><br><en>Account.</en><br> * `SS_CONVERSION` - <ja>コンバージョントラッカー（コンバージョン測定）です。</ja><br><en>Conversion tracker for conversion tracking.</en><br> * `BIDDING_STRATEGY` - <ja>自動入札設定です。</ja><br><en>Auto bidding setting.</en><br> * `NEGATIVE_CAMPAIGN_USER_LIST` - <ja>対象外ターゲットリストです（キャンペーン）。</ja><br><en>Exclude target list for campaign.</en><br> * `NEGATIVE_AD_GROUP_USER_LIST` - <ja>対象外ターゲットリストです（広告グループ）。</ja><br><en>Exclude target list for ad group.</en><br> * `AD_GROUP_USER_LIST` - <ja>ターゲットリストです（広告グループ）。</ja><br><en>Target list for ad group.</en><br> * `TARGET_LIST` - <ja>サイトリターゲテイングのターゲットリストです。</ja><br><en>Target list of Site Retargeting.</en><br> * `SHARED_SET` - <ja>共有リストです。</ja><br><en>Shared list.</en><br> * `SHARED_CRITERION` - <ja>共有キーワードです。</ja><br><en>Shared keywords.</en><br> * `CAMPAIGN_SHARED_SET` - <ja>キャンペーン共有リストです。</ja><br><en>Shared list for campaign.</en><br> * `AD_CUSTOMIZER` - <ja>アドカスタマイザーです。</ja><br><en>Ad customizer.</en><br> * `EXCLUDE_AD_CUSTOMIZER` - <ja>アドカスタマイザーを除くすべての履歴です。</ja><br><en>All operation history excepting ad customizer.</en><br> * `ALL` - <ja>すべての履歴です。</ja><br><en>All operation history.</en><br> * `UNKNOWN` - 未知の値です。<br>Unknown Value
     *
     * @return $this
     */
    public function setEntityType($entity_type)
    {
        $this->container['entity_type'] = $entity_type;

        return $this;
    }

    /**
     * Gets event_types
     *
     * @return \YahooAdsSearchApi\Client\Model\AuditLogServiceEventTypes[]|null
     */
    public function getEventTypes()
    {
        return $this->container['event_types'];
    }

    /**
     * Sets event_types
     *
     * @param \YahooAdsSearchApi\Client\Model\AuditLogServiceEventTypes[]|null $event_types event_types
     *
     * @return $this
     */
    public function setEventTypes($event_types)
    {
        $this->container['event_types'] = $event_types;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


