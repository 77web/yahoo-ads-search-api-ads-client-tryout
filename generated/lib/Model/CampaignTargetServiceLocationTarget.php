<?php
/**
 * CampaignTargetServiceLocationTarget
 *
 * PHP version 5
 *
 * @category Class
 * @package  YahooAdsSearchApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yahoo!広告 検索広告 API リファレンス β版 / Yahoo! Ads Search Ads API Reference β Version
 *
 * <ja>Yahoo!広告 検索広告 APIのWebサービスについて説明します。<br> 「Try it out」のご利用には、事前にアプリケーションの登録が必要です。また、アプリケーションのリダイレクトURIの1つに<br> https://yahoojp-marketing.github.io/ads-search-api-documents/oauth2-redirect.htmlを登録してください。 </ja><br> <br> <en>Search Ads API Web Services supported in Yahoo! Ads API.<br> When you use \"Try it out\", you need to register your application in advance.<br> As one of redirect URI for application, you need to set \"https://yahoojp-marketing.github.io/ads-search-api-documents/oauth2-redirect.html\". </en>
 *
 * The version of the OpenAPI document: v0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace YahooAdsSearchApi\Client\Model;

use \ArrayAccess;
use \YahooAdsSearchApi\Client\ObjectSerializer;

/**
 * CampaignTargetServiceLocationTarget Class Doc Comment
 *
 * @category Class
 * @description &lt;ja&gt;CampaignTargetServiceLocationTargetオブジェクトは、地域ターゲティング設定です。&lt;/ja&gt;&lt;br&gt;&lt;en&gt;CampaignTargetServiceLocationTarget object is a location target setting.&lt;/en&gt;&lt;hr&gt;&lt;details&gt;&lt;summary&gt;Requirement&lt;/summary&gt;&lt;table border&#x3D;&#39;1&#39;&gt;&lt;tr&gt;&lt;th&gt;PROPERTY&lt;/th&gt;&lt;th&gt;ADD&lt;/th&gt;&lt;th&gt;SET&lt;/th&gt;&lt;th&gt;REMOVE&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;cityNameEN&lt;/td&gt;&lt;td&gt;Ignore&lt;/td&gt;&lt;td&gt;Ignore&lt;/td&gt;&lt;td&gt;Ignore&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;cityNameJA&lt;/td&gt;&lt;td&gt;Ignore&lt;/td&gt;&lt;td&gt;Ignore&lt;/td&gt;&lt;td&gt;Ignore&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;excludedType&lt;/td&gt;&lt;td&gt;Optional&lt;/td&gt;&lt;td&gt;Ignore&lt;/td&gt;&lt;td&gt;Ignore&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;provinceNameEN&lt;/td&gt;&lt;td&gt;Ignore&lt;/td&gt;&lt;td&gt;Ignore&lt;/td&gt;&lt;td&gt;Ignore&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;provinceNameJA&lt;/td&gt;&lt;td&gt;Ignore&lt;/td&gt;&lt;td&gt;Ignore&lt;/td&gt;&lt;td&gt;Ignore&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;targetingStatus&lt;/td&gt;&lt;td&gt;Ignore&lt;/td&gt;&lt;td&gt;Ignore&lt;/td&gt;&lt;td&gt;Ignore&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/details&gt;
 * @package  YahooAdsSearchApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CampaignTargetServiceLocationTarget implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CampaignTargetServiceLocationTarget';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'city_name_en' => 'string',
        'city_name_ja' => 'string',
        'excluded_type' => '\YahooAdsSearchApi\Client\Model\CampaignTargetServiceExcludedType',
        'province_name_en' => 'string',
        'province_name_ja' => 'string',
        'targeting_status' => '\YahooAdsSearchApi\Client\Model\CampaignTargetServiceTargetingStatus'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'city_name_en' => null,
        'city_name_ja' => null,
        'excluded_type' => null,
        'province_name_en' => null,
        'province_name_ja' => null,
        'targeting_status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'city_name_en' => 'cityNameEN',
        'city_name_ja' => 'cityNameJA',
        'excluded_type' => 'excludedType',
        'province_name_en' => 'provinceNameEN',
        'province_name_ja' => 'provinceNameJA',
        'targeting_status' => 'targetingStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'city_name_en' => 'setCityNameEn',
        'city_name_ja' => 'setCityNameJa',
        'excluded_type' => 'setExcludedType',
        'province_name_en' => 'setProvinceNameEn',
        'province_name_ja' => 'setProvinceNameJa',
        'targeting_status' => 'setTargetingStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'city_name_en' => 'getCityNameEn',
        'city_name_ja' => 'getCityNameJa',
        'excluded_type' => 'getExcludedType',
        'province_name_en' => 'getProvinceNameEn',
        'province_name_ja' => 'getProvinceNameJa',
        'targeting_status' => 'getTargetingStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['city_name_en'] = isset($data['city_name_en']) ? $data['city_name_en'] : null;
        $this->container['city_name_ja'] = isset($data['city_name_ja']) ? $data['city_name_ja'] : null;
        $this->container['excluded_type'] = isset($data['excluded_type']) ? $data['excluded_type'] : null;
        $this->container['province_name_en'] = isset($data['province_name_en']) ? $data['province_name_en'] : null;
        $this->container['province_name_ja'] = isset($data['province_name_ja']) ? $data['province_name_ja'] : null;
        $this->container['targeting_status'] = isset($data['targeting_status']) ? $data['targeting_status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets city_name_en
     *
     * @return string|null
     */
    public function getCityNameEn()
    {
        return $this->container['city_name_en'];
    }

    /**
     * Sets city_name_en
     *
     * @param string|null $city_name_en <ja>市区町村名（英語）です。</ja><br><en>City （English）</en>
     *
     * @return $this
     */
    public function setCityNameEn($city_name_en)
    {
        $this->container['city_name_en'] = $city_name_en;

        return $this;
    }

    /**
     * Gets city_name_ja
     *
     * @return string|null
     */
    public function getCityNameJa()
    {
        return $this->container['city_name_ja'];
    }

    /**
     * Sets city_name_ja
     *
     * @param string|null $city_name_ja <ja>都道府県名（日本語）です。</ja><br><en>City （Japanese）</en>
     *
     * @return $this
     */
    public function setCityNameJa($city_name_ja)
    {
        $this->container['city_name_ja'] = $city_name_ja;

        return $this;
    }

    /**
     * Gets excluded_type
     *
     * @return \YahooAdsSearchApi\Client\Model\CampaignTargetServiceExcludedType|null
     */
    public function getExcludedType()
    {
        return $this->container['excluded_type'];
    }

    /**
     * Sets excluded_type
     *
     * @param \YahooAdsSearchApi\Client\Model\CampaignTargetServiceExcludedType|null $excluded_type excluded_type
     *
     * @return $this
     */
    public function setExcludedType($excluded_type)
    {
        $this->container['excluded_type'] = $excluded_type;

        return $this;
    }

    /**
     * Gets province_name_en
     *
     * @return string|null
     */
    public function getProvinceNameEn()
    {
        return $this->container['province_name_en'];
    }

    /**
     * Sets province_name_en
     *
     * @param string|null $province_name_en <ja>都道府県名（英語）です。</ja><br><en>Prefecture（English）</en>
     *
     * @return $this
     */
    public function setProvinceNameEn($province_name_en)
    {
        $this->container['province_name_en'] = $province_name_en;

        return $this;
    }

    /**
     * Gets province_name_ja
     *
     * @return string|null
     */
    public function getProvinceNameJa()
    {
        return $this->container['province_name_ja'];
    }

    /**
     * Sets province_name_ja
     *
     * @param string|null $province_name_ja <ja>市区町村名（日本語）です。</ja><br><en>Prefecture（Japanese）</en>
     *
     * @return $this
     */
    public function setProvinceNameJa($province_name_ja)
    {
        $this->container['province_name_ja'] = $province_name_ja;

        return $this;
    }

    /**
     * Gets targeting_status
     *
     * @return \YahooAdsSearchApi\Client\Model\CampaignTargetServiceTargetingStatus|null
     */
    public function getTargetingStatus()
    {
        return $this->container['targeting_status'];
    }

    /**
     * Sets targeting_status
     *
     * @param \YahooAdsSearchApi\Client\Model\CampaignTargetServiceTargetingStatus|null $targeting_status targeting_status
     *
     * @return $this
     */
    public function setTargetingStatus($targeting_status)
    {
        $this->container['targeting_status'] = $targeting_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


